interface ConfigType {
  basenameFrontend: string;
  domain: string;
  port: string;
  apiPath: string;
  defaultList: string[];
  backendCheckToPath: string;
}

let globalConfig: ConfigType | null = null;
let cachedUrl: string | null = null; // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

try {
    const configModule = await import("../config/config") as { globalConfig: ConfigType };
    globalConfig = configModule.globalConfig;
    console.log('–ò–º–ø–æ—Ä—Ç globalConfig –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ:', globalConfig);
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ globalConfig:', error);
    globalConfig = null; 
}

export async function init(): Promise<string | null> {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (cachedUrl) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL:', cachedUrl);
        return cachedUrl;
    }
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    const protocol = window.location.protocol.replace(':', '');
    
    if (!globalConfig) {
        console.error('‚ùå globalConfig –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return null;
    }
    
    if (!globalConfig.port) {
        console.log('‚ö†Ô∏è –ü–æ—Ä—Ç –Ω–µ –∑–∞–¥–∞–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const urlsToCheck: string[] = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –±—ç–∫–µ–Ω–¥–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if (globalConfig.backendCheckToPath) {
        urlsToCheck.push(`${protocol}://${globalConfig.backendCheckToPath}/init437721`);
    }
    
    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—É—Ç–∏ –∏–∑ defaultList
    for (const proto of ['https', 'http']) {
        for (const path of globalConfig.defaultList) {
            const url = `${proto}://${path}/init437721`;
            // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è URL
            if (!urlsToCheck.includes(url)) {
                urlsToCheck.push(url);
            }
        }
    }

    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ${urlsToCheck.length} –ø—É—Ç–µ–π...`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const checkPromises = urlsToCheck.map(async (url, index) => {
        try {
            console.log(`   ${index + 1}. –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${url}`);
            const result = await checkConnection(url);
            return result ? { url, result } : null;
        } catch (error) {
            console.log(`   ‚ùå ${url} - –æ—à–∏–±–∫–∞: ${error}`);
            return null;
        }
    });

    // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    try {
        const results = await Promise.allSettled(checkPromises);
        
        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for (const result of results) {
            if (result.status === 'fulfilled' && result.value) {
                cachedUrl = result.value.result;
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–µ—Ä–≤–µ—Ä: ${result.value.url}`);
                console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                return cachedUrl;
            }
        }
        
        console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å');
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è)
export function resetCache(): void {
    cachedUrl = null;
    console.log('üîÑ –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω');
}

async function checkConnection(url: string): Promise<string | null> {
    try {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å:', url);
        
        // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        console.log('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);
        
        if (response.status === 200) {
            const data = await response.json();
            if (data.status === 'ok') {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å:', url);
                return url;
            }
        }
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç:', url);
        return null;
    } catch (error) {
        if (error instanceof Error && error.name === 'AbortError') {
            console.error('‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å:', url);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å:', url, error);
        }
        return null;
    }
}