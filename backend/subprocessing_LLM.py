import asyncio
import json
import re
from typing import List, Tuple

from configs.cfg import preprocessing_model, postprocessing_model
from utils.openrouter_request import chat_completion_openrouter

from utils.logger import setup_logger

logger = setup_logger("SUBLLM")


async def pre_proccessing(user_query: str) -> str:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –∏–º—ë–Ω.

    Args:
        user_query (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        str: –û–±–æ–≥–∞—â—ë–Ω–Ω—ã–π –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –∏—Ö —Ñ–æ—Ä–º–∞–º–∏.
    """
    system_prompt = (
        "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–µ–∑—é–º–µ.\n"
        "–ü—Ä–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–≥–æ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏–º—ë–Ω, —Å–∏–Ω–æ–Ω–∏–º–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä.\n"
        "\n"
        "üîπ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞:\n"
        "- –î–æ–±–∞–≤—å —Å–∏–Ω–æ–Ω–∏–º—ã, —Ñ–æ—Ä–º—ã, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è, –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.\n"
        "- –ù–µ –≤–∫–ª—é—á–∞–π —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞ ‚Äî **–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π**: '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '—ç–∫—Å–ø–µ—Ä—Ç', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—Ä–∞–±–æ—Ç–Ω–∏–∫'.\n"
        "- –ù–µ –¥–æ–±–∞–≤–ª—è–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.\n"
        "- –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–º–µ–∂–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è '–≤—Ä–∞—á' ‚Äî '—Ç–µ—Ä–∞–ø–µ–≤—Ç', '—Ö–∏—Ä—É—Ä–≥', '–ø–µ–¥–∏–∞—Ç—Ä'), –Ω–æ –Ω–µ –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
        "- –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.\n"
        "- –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n"
        "\n"
        "üîπ –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–∞–ª–µ—Ä–∞, –°–µ—Ä–≥–µ–π, Alex, Ivan):\n"
        "- –î–æ–±–∞–≤—å –µ–≥–æ –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É, —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã, –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n"
        "  –ü—Ä–∏–º–µ—Ä: –í–∞–ª–µ—Ä–∞ ‚Üí –í–∞–ª–µ—Ä–∏–π, –í–∞–ª–µ—Ä–∞, Valera, Valeriy, Valery\n"
        "\n"
        "üîπ –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É, —Ç–æ —Å–¥–µ–ª–∞–π —ç—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ ‚Üí SMM, –°–ú–ú)\n"
        "\n"
        "üìå –í–µ—Ä–Ω–∏ **–æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É** ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, **–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞**."
    )

    response = await chat_completion_openrouter([
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_query},
    ], model=preprocessing_model)

    return response.strip()


def chunk_list(lst, size):
    for i in range(0, len(lst), size):
        yield lst[i:i + size]


async def post_proccessing(user_query: str, results: List[dict], highlights: List[str], chunk_size: int = 5) -> Tuple[List[dict], List[str]]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—è LLM —Ç–æ–ª—å–∫–æ highlights –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

    Args:
        user_query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        results (List[dict]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.
        highlights (List[str]): –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        chunk_size (int): –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞.

    Returns:
        Tuple[List[dict], List[str]]: –°–ø–∏—Å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö results –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö highlights.
    """
    if not results or not highlights:
        return [], []

    async def process_chunk(chunk: List[Tuple[dict, str]]) -> Tuple[List[dict], List[str]]:
        system_prompt = (
            "–¢—ã ‚Äî –ò–ò, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ä–µ–∑—é–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî –∑–∞–ø—Ä–æ—Å –∏ —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤. –ö–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç telegram_id –∏ —Ç–µ–∫—Å—Ç.\n"
            "–í–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞: {'telegram_id': <id>, '—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ': '–î–∞'} ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö.\n"
            "–ï—Å–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–π –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç."
        )

        blocks = [f"[{r['telegram_id']}] {highlight}" for r, highlight in chunk]

        user_prompt = f"–ó–∞–ø—Ä–æ—Å: {user_query}\n–§—Ä–∞–≥–º–µ–Ω—Ç—ã:\n" + "\n\n".join(blocks)

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]

        try:
            response = await chat_completion_openrouter(messages, model=postprocessing_model)
            clean = re.sub(r"```json\s*|```", "", response).strip()
            parsed = json.loads(clean)
        except Exception as e:
            logger.error(f"[LLM Chunk] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e}")
            return [], []

        telegram_id_to_pair = {r["telegram_id"]: (r, h) for r, h in chunk}
        filtered_results = []
        filtered_highlights = []

        for item in parsed:
            tid = item.get("telegram_id")
            if item.get("—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ", "").lower().startswith("–¥–∞") and tid in telegram_id_to_pair:
                result, highlight = telegram_id_to_pair[tid]
                filtered_results.append(result)
                filtered_highlights.append(highlight)

        return filtered_results, filtered_highlights

    paired = list(zip(results, highlights))
    tasks = [process_chunk(chunk) for chunk in chunk_list(paired, chunk_size)]
    all_filtered = await asyncio.gather(*tasks)

    flat_results = [item for chunk in all_filtered for item in chunk[0]]
    flat_highlights = [item for chunk in all_filtered for item in chunk[1]]

    logger.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ highlights –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(flat_results)} –∏–∑ {len(results)}")
    return flat_results, flat_highlights
